pipeline {
    agent any
    environment {
        APP_DIR = 'demo-app/'               // Directory of the application
        TOMCAT_WEBAPPS = '/usr/local/tomcat/webapps/'  // Tomcat webapps directory
        TOMCAT_USER = 'tomcat'              // SSH user for Tomcat servers
        WAR_FILE = 'demo-app.war'           // Name of the WAR file to deploy
    }
    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                checkout scm
            }
        }
        stage('Build') {
            steps {
                // Navigate to the app directory and build the project
                dir("${APP_DIR}") {
                    sh 'mvn clean package'
                }
            }
        }
        stage('Deploy to Tomcat') {
            steps {
                script {
                    def tomcatConfig = [:]
                    if (env.BRANCH_NAME == 'dev') {
                        tomcatConfig.host = '172.18.0.4'
                        tomcatConfig.sshPort = '2223' // Replace with the appropriate SSH port for the dev host
                    } else if (env.BRANCH_NAME == 'prod') {
                        tomcatConfig.host = '172.18.0.5'
                        tomcatConfig.sshPort = '2224' // Replace with the appropriate SSH port for the prod host
                    } else {
                        error("Branch ${env.BRANCH_NAME} is not configured for deployment.")
                    }

                    sshagent(['tomcat-ssh']) {
                        // Deploy the WAR file to the Tomcat server
                        sh """
                            ssh -p ${tomcatConfig.sshPort} ${TOMCAT_USER}@${tomcatConfig.host} 'mkdir -p ${TOMCAT_WEBAPPS}'
                            scp -P ${tomcatConfig.sshPort} ${APP_DIR}/target/${WAR_FILE} ${TOMCAT_USER}@${tomcatConfig.host}:${TOMCAT_WEBAPPS}
                            ssh -p ${tomcatConfig.sshPort} ${TOMCAT_USER}@${tomcatConfig.host} '/usr/local/tomcat/bin/shutdown.sh || true'
                            ssh -p ${tomcatConfig.sshPort} ${TOMCAT_USER}@${tomcatConfig.host} '/usr/local/tomcat/bin/startup.sh'
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
    }
}
